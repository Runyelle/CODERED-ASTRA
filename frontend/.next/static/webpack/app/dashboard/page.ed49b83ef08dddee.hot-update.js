"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("app/dashboard/page",{

/***/ "(app-pages-browser)/./lib/gemini-service.ts":
/*!*******************************!*\
  !*** ./lib/gemini-service.ts ***!
  \*******************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   calculateEnvironmentalImpact: () => (/* binding */ calculateEnvironmentalImpact),\n/* harmony export */   formatNumber: () => (/* binding */ formatNumber)\n/* harmony export */ });\n/* harmony import */ var _google_generative_ai__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @google/generative-ai */ \"(app-pages-browser)/./node_modules/@google/generative-ai/dist/index.mjs\");\n\n// Initialize Gemini AI\nconst genAI = new _google_generative_ai__WEBPACK_IMPORTED_MODULE_0__.GoogleGenerativeAI(\"AIzaSyB7MD_RfrNKogch8om_iQiI9ey5QDpQSHM\" || 0);\n// Simple rate limiter to prevent quota exhaustion\nlet lastRequestTime = 0;\nconst MIN_REQUEST_INTERVAL = 7000 // 7 seconds between requests (to stay under 10/minute limit)\n;\nasync function rateLimitedRequest(requestFn) {\n    const now = Date.now();\n    const timeSinceLastRequest = now - lastRequestTime;\n    if (timeSinceLastRequest < MIN_REQUEST_INTERVAL) {\n        const waitTime = MIN_REQUEST_INTERVAL - timeSinceLastRequest;\n        console.log(\"Rate limiting: waiting \".concat(waitTime, \"ms before next request\"));\n        await new Promise((resolve)=>setTimeout(resolve, waitTime));\n    }\n    lastRequestTime = Date.now();\n    return requestFn();\n}\nasync function calculateEnvironmentalImpact(companyData) {\n    let timePeriod = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : 'monthly';\n    try {\n        const model = genAI.getGenerativeModel({\n            model: 'gemini-2.5-flash'\n        });\n        const prompt = \"\\n    As an environmental sustainability expert, calculate the environmental impact metrics for \".concat(companyData.companyName, \", \\n    a \").concat(companyData.size, \" \").concat(companyData.industry, \" company.\\n    \\n    Company Details:\\n    - Industry: \").concat(companyData.industry, \"\\n    - Size: \").concat(companyData.size, \"\\n    - Operations: \").concat(companyData.operations.join(', '), \"\\n    - Sustainability Goals: \").concat(companyData.sustainabilityGoals.join(', '), \"\\n    - Time Period: \").concat(timePeriod, '\\n    \\n    Please provide realistic calculations for:\\n    1. Waste Processed (in metric tons)\\n    2. CO2 Reduced (in metric tons)\\n    3. Energy Saved (in MWh)\\n    4. Water Saved (in cubic meters)\\n    \\n    Base your calculations on industry standards and the company\\'s size and operations.\\n    Return the data in JSON format with the following structure:\\n    {\\n      \"wasteProcessed\": {\\n        \"total\": number,\\n        \"unit\": \"metric tons\",\\n        \"description\": \"string\"\\n      },\\n      \"co2Reduced\": {\\n        \"total\": number,\\n        \"unit\": \"metric tons\",\\n        \"description\": \"string\"\\n      },\\n      \"energySaved\": {\\n        \"total\": number,\\n        \"unit\": \"MWh\",\\n        \"description\": \"string\"\\n      },\\n      \"waterSaved\": {\\n        \"total\": number,\\n        \"unit\": \"cubic meters\",\\n        \"description\": \"string\"\\n      }\\n    }\\n    ');\n        // Use rate-limited request to prevent quota exhaustion\n        const result = await rateLimitedRequest(async ()=>{\n            return await model.generateContent(prompt);\n        });\n        const response = await result.response;\n        const text = response.text();\n        // Extract JSON from the response\n        const jsonMatch = text.match(/\\{[\\s\\S]*\\}/);\n        if (jsonMatch) {\n            return JSON.parse(jsonMatch[0]);\n        }\n        // Fallback calculations if Gemini fails\n        return getFallbackCalculations(companyData, timePeriod);\n    } catch (error) {\n        console.error('Error calculating environmental impact:', error);\n        // Check if it's a quota error\n        if (error instanceof Error && error.message.includes('quota')) {\n            console.warn('Gemini API quota exceeded, using fallback calculations');\n        }\n        // Always return fallback calculations on any error\n        return getFallbackCalculations(companyData, timePeriod);\n    }\n}\nfunction getFallbackCalculations(companyData, timePeriod) {\n    // Base calculations for ConocoPhillips (oil & gas industry)\n    const multiplier = timePeriod === 'monthly' ? 1 : timePeriod === 'quarterly' ? 3 : 12;\n    return {\n        wasteProcessed: {\n            total: Math.round(150 * multiplier),\n            unit: 'metric tons',\n            description: 'Waste materials processed and recycled'\n        },\n        co2Reduced: {\n            total: Math.round(2500 * multiplier),\n            unit: 'metric tons',\n            description: 'CO2 emissions reduced through efficiency improvements'\n        },\n        energySaved: {\n            total: Math.round(1200 * multiplier),\n            unit: 'MWh',\n            description: 'Energy saved through optimization initiatives'\n        },\n        waterSaved: {\n            total: Math.round(5000 * multiplier),\n            unit: 'cubic meters',\n            description: 'Water conserved through recycling and efficiency'\n        }\n    };\n}\nfunction formatNumber(num) {\n    if (num >= 1000000) {\n        return (num / 1000000).toFixed(1) + 'M';\n    } else if (num >= 1000) {\n        return (num / 1000).toFixed(1) + 'K';\n    }\n    return num.toString();\n}\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./lib/gemini-service.ts\n"));

/***/ })

});